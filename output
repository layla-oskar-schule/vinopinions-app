const t = {
  ruleId: 'react/no-unstable-nested-components',
  rulesMeta: {
    'accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-callback-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'array-element-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'arrow-body-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'arrow-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'arrow-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'block-scoped-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'block-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'brace-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'callback-return': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    camelcase: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'capitalized-comments': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'class-methods-use-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'comma-dangle': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'comma-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'comma-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    complexity: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'computed-property-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'consistent-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'consistent-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'constructor-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    curly: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'default-case': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'default-case-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'dot-location': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'eol-last': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    eqeqeq: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'for-direction': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'func-call-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'func-name-matching': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'function-call-argument-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'function-paren-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'generator-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'getter-return': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'global-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'grouped-accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'guard-for-in': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'handle-callback-err': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-blacklist': {
      deprecated: true,
      replacedBy: [Array],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-denylist': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-length': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-match': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'implicit-arrow-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    indent: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'indent-legacy': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'init-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'jsx-quotes': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'key-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'keyword-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'line-comment-position': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'linebreak-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-directive': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'lines-between-class-members': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'logical-assignment-operators': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
    },
    'max-classes-per-file': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-depth': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-len': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines-per-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-nested-callbacks': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'multiline-comment-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'multiline-ternary': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
      fixable: 'whitespace',
    },
    'new-cap': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'new-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'newline-after-var': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-before-return': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-per-chained-call': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-alert': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-async-promise-executor': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-await-in-loop': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-bitwise': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-buffer-constructor': {
      deprecated: true,
      replacedBy: [],
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-caller': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-case-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-catch-shadow': {
      type: 'suggestion',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-class-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-compare-neg-zero': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-cond-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-confusing-arrow': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-console': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      hasSuggestions: true,
      messages: [Object],
    },
    'no-const-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-binary-expression': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-condition': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-constructor-return': {
      type: 'problem',
      docs: [Object],
      schema: {},
      fixable: null,
      messages: [Object],
    },
    'no-continue': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-control-regex': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-debugger': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-delete-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-div-regex': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-dupe-args': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-else-if': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-keys': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-case': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-imports': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-else-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-empty': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-character-class': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-pattern': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-static-block': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eq-null': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-ex-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-extend-native': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-extra-bind': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-boolean-cast': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-label': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'no-extra-semi': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-fallthrough': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-floating-decimal': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-func-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-global-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-coercion': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implied-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-import-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-inline-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-inner-declarations': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-regexp': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-irregular-whitespace': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-iterator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-label-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-lone-blocks': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-lonely-if': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-misleading-character-class': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-mixed-operators': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-requires': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-spaces-and-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-multi-str': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-multiple-empty-lines': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-native-reassign': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [Array],
      messages: [Object],
    },
    'no-negated-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-negated-in-lhs': {
      type: 'problem',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-nested-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-native-nonconstructor': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-object': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      messages: [Object],
    },
    'no-new-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-symbol': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-wrappers': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-nonoctal-decimal-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-obj-calls': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-object-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-octal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-octal-escape': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-param-reassign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-path-concat': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-plusplus': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-process-env': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-process-exit': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-promise-executor-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'no-proto': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-prototype-builtins': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-regex-spaces': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-restricted-exports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-restricted-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    'no-restricted-modules': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-properties': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-syntax': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-return-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-return-await': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      deprecated: true,
      replacedBy: [],
      schema: [],
      messages: [Object],
    },
    'no-script-url': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-self-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-self-compare': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sequences': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-setter-return': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-shadow-restricted-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-spaced-func': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-sparse-arrays': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sync': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-template-curly-in-string': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-this-before-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-throw-literal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-trailing-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-undef': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-undef-init': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-undefined': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-underscore-dangle': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unexpected-multiline': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unmodified-loop-condition': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unneeded-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-unreachable': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unreachable-loop': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unsafe-finally': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unsafe-negation': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unsafe-optional-chaining': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unused-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-unused-private-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-use-before-define': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-useless-backreference': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-call': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-catch': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-computed-key': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-useless-concat': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-constructor': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'no-useless-rename': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-useless-return': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-void': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-warning-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-whitespace-before-property': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-with': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'nonblock-statement-body-position': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-property-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'object-shorthand': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'one-var': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'one-var-declaration-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'operator-assignment': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'operator-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'padded-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'padding-line-between-statements': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'prefer-arrow-callback': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-destructuring': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-exponentiation-operator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-named-capture-group': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'prefer-numeric-literals': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-has-own': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-promise-reject-errors': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'prefer-reflect': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [],
      schema: [Array],
      messages: [Object],
    },
    'prefer-regex-literals': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'prefer-rest-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'prefer-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: null,
      messages: [Object],
    },
    'prefer-template': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'quote-props': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    quotes: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    radix: {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'require-atomic-updates': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'require-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      deprecated: true,
      replacedBy: [],
      messages: [Object],
    },
    'require-unicode-regexp': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'require-yield': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'rest-spread-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    semi: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'semi-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'semi-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'sort-imports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'sort-keys': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'sort-vars': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'space-before-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-before-function-paren': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-in-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-infix-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-unary-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'spaced-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    strict: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'switch-colon-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'symbol-description': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'template-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'template-tag-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'unicode-bom': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'use-isnan': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'valid-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
      deprecated: true,
      replacedBy: [],
    },
    'valid-typeof': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'vars-on-top': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'wrap-iife': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'wrap-regex': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'yield-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    yoda: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prettier/prettier': {
      docs: [Object],
      type: 'layout',
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'eslint-comments/disable-enable-pair': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/no-aggregating-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-duplicate-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-restricted-disable': {
      docs: [Object],
      fixable: null,
      schema: [Object],
      type: 'suggestion',
    },
    'eslint-comments/no-unlimited-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-unused-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-unused-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-use': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/require-description': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'react/boolean-prop-naming': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/button-has-type': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/default-props-match-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/destructuring-assignment': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/display-name': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-component-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-dom-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-elements': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-foreign-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/function-component-definition': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/hook-use-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/iframe-missing-sandbox': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/jsx-boolean-value': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-child-element-spacing': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [],
    },
    'react/jsx-closing-bracket-location': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-closing-tag-location': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
    },
    'react/jsx-curly-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-curly-newline': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'react/jsx-equals-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-filename-extension': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-first-prop-new-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-handler-names': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-key': { docs: [Object], messages: [Object], schema: [Array] },
    'react/jsx-max-depth': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-max-props-per-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-newline': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-bind': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-comment-textnodes': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/jsx-no-constructed-context-values': {
      docs: [Object],
      messages: [Object],
      schema: {},
    },
    'react/jsx-no-duplicate-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-leaked-render': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    'react/jsx-no-literals': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-script-url': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-target-blank': {
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-useless-fragment': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-one-expression-per-line': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-undef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-curly-brace-presence': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-pascal-case': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-fragments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-props-no-multi-spaces': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/jsx-props-no-spreading': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-default-props': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-space-before-closing': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-tag-spacing': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-uses-react': { docs: [Object], schema: [] },
    'react/jsx-uses-vars': { docs: [Object], schema: [] },
    'react/jsx-wrap-multilines': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-invalid-html-attribute': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/no-access-state-in-setstate': { docs: [Object], messages: [Object] },
    'react/no-adjacent-inline-elements': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/no-array-index-key': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-arrow-function-lifecycle': {
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    'react/no-children-prop': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-danger': { docs: [Object], messages: [Object], schema: [] },
    'react/no-danger-with-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-deprecated': { docs: [Object], messages: [Object], schema: [] },
    'react/no-did-mount-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-did-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-direct-mutation-state': { docs: [Object], messages: [Object] },
    'react/no-find-dom-node': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-is-mounted': { docs: [Object], messages: [Object], schema: [] },
    'react/no-multi-comp': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-namespace': { docs: [Object], messages: [Object], schema: [] },
    'react/no-set-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-string-refs': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-redundant-should-component-update': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-render-return-value': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-this-in-sfc': { docs: [Object], messages: [Object], schema: [] },
    'react/no-typos': { docs: [Object], messages: [Object], schema: [] },
    'react/no-unescaped-entities': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unknown-property': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-unsafe': { docs: [Object], messages: [Object], schema: [Array] },
    'react/no-unstable-nested-components': { docs: [Object], schema: [Array] },
    'react/no-unused-class-component-methods': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-unused-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unused-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-object-type-as-default-prop': {
      docs: [Object],
      messages: [Object],
    },
    'react/no-will-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-es6-class': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-exact-props': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/prefer-read-only-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/prefer-stateless-function': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prop-types': { docs: [Object], messages: [Object], schema: [Array] },
    'react/react-in-jsx-scope': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/require-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-optimization': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-render-return': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/self-closing-comp': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/sort-comp': { docs: [Object], messages: [Object], schema: [Array] },
    'react/sort-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/sort-prop-types': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/state-in-constructor': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/static-property-placement': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [Array],
    },
    'react/style-prop-object': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/void-dom-elements-no-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react-hooks/rules-of-hooks': { type: 'problem', docs: [Object] },
    'react-hooks/exhaustive-deps': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      schema: [Array],
    },
    'react-native/no-unused-styles': { schema: [] },
    'react-native/no-inline-styles': { schema: [] },
    'react-native/no-color-literals': { schema: [] },
    'react-native/sort-styles': { fixable: 'code', schema: [Array] },
    'react-native/split-platform-components': {
      fixable: 'code',
      schema: [Array],
    },
    'react-native/no-raw-text': { schema: [Array] },
    'react-native/no-single-element-style-arrays': {
      docs: [Object],
      fixable: 'code',
    },
    '@react-native/platform-colors': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/consistent-test-it': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/expect-expect': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/max-expects': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/max-nested-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-alias-methods': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/no-commented-out-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-conditional-expect': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-conditional-in-test': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-deprecated-functions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      fixable: 'code',
    },
    'jest/no-disabled-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-done-callback': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-duplicate-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-export': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/no-focused-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/no-identical-title': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-if': {
      docs: [Object],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-interpolation-in-snapshots': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    'jest/no-jasmine-globals': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-jest-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-large-snapshots': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-mocks-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-restricted-matchers': {
      docs: [Object],
      type: 'suggestion',
      schema: [Array],
      messages: [Object],
    },
    'jest/no-standalone-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-test-prefixes': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-test-return-statement': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-called-with': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-comparison-matcher': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-each': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-equality-matcher': {
      docs: [Object],
      messages: [Object],
      hasSuggestions: true,
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-expect-assertions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      hasSuggestions: true,
      schema: [Array],
    },
    'jest/prefer-expect-resolves': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-in-order': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-on-top': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-lowercase-title': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'jest/prefer-mock-promise-shorthand': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      fixable: 'code',
    },
    'jest/prefer-snapshot-hint': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/prefer-spy-on': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-strict-equal': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      hasSuggestions: true,
    },
    'jest/prefer-to-be': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-contain': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-have-length': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-todo': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'layout',
    },
    'jest/require-hook': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/require-to-throw-message': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/require-top-level-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/unbound-method': {
      messages: [Object],
      schema: [Array],
      type: 'problem',
      docs: [Object],
    },
    'jest/valid-describe-callback': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/valid-expect-in-promise': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/valid-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/valid-title': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
      fixable: 'code',
    },
    'ft-flow/array-style-complex-type': { fixable: 'code' },
    'ft-flow/array-style-simple-type': { fixable: 'code' },
    'ft-flow/arrow-parens': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      type: 'layout',
    },
    'ft-flow/boolean-style': { fixable: 'code' },
    'ft-flow/define-flow-type': undefined,
    'ft-flow/delimiter-dangle': { fixable: 'code' },
    'ft-flow/enforce-line-break': { fixable: 'code' },
    'ft-flow/enforce-suppression-code': undefined,
    'ft-flow/generic-spacing': { fixable: 'whitespace' },
    'ft-flow/interface-id-match': undefined,
    'ft-flow/newline-after-flow-annotation': { fixable: 'code' },
    'ft-flow/no-dupe-keys': undefined,
    'ft-flow/no-duplicate-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/no-existential-type': undefined,
    'ft-flow/no-flow-fix-me-comments': undefined,
    'ft-flow/no-flow-suppressions-in-strict-files': undefined,
    'ft-flow/no-internal-flow-type': undefined,
    'ft-flow/no-mixed': undefined,
    'ft-flow/no-mutable-array': { fixable: 'code' },
    'ft-flow/no-primitive-constructor-types': undefined,
    'ft-flow/no-types-missing-file-annotation': undefined,
    'ft-flow/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'ft-flow/no-weak-types': undefined,
    'ft-flow/object-type-curly-spacing': { fixable: 'code' },
    'ft-flow/object-type-delimiter': { fixable: 'code' },
    'ft-flow/quotes': { fixable: 'code' },
    'ft-flow/require-compound-type-alias': undefined,
    'ft-flow/require-exact-type': { fixable: 'code' },
    'ft-flow/require-indexer-name': { fixable: 'code' },
    'ft-flow/require-inexact-type': undefined,
    'ft-flow/require-parameter-type': undefined,
    'ft-flow/require-readonly-react-props': undefined,
    'ft-flow/require-return-type': undefined,
    'ft-flow/require-types-at-top': undefined,
    'ft-flow/require-valid-file-annotation': { fixable: 'code' },
    'ft-flow/require-variable-type': undefined,
    'ft-flow/semi': { fixable: 'code' },
    'ft-flow/sort-keys': { fixable: 'code' },
    'ft-flow/sort-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/space-after-type-colon': { fixable: 'code' },
    'ft-flow/space-before-generic-bracket': { fixable: 'code' },
    'ft-flow/space-before-type-colon': { fixable: 'code' },
    'ft-flow/spread-exact-type': undefined,
    'ft-flow/type-id-match': undefined,
    'ft-flow/type-import-style': { fixable: 'code' },
    'ft-flow/union-intersection-spacing': { fixable: 'code' },
    'ft-flow/use-flow-type': undefined,
    'ft-flow/use-read-only-spread': { messages: [Object] },
    'ft-flow/valid-syntax': { deprecated: true },
    '@typescript-eslint/adjacent-overload-signatures': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/array-type': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/await-thenable': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/ban-ts-comment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/ban-tslint-comment': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/ban-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/block-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/brace-style': {
      type: 'layout',
      docs: [Object],
      messages: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/class-literal-property-style': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/comma-dangle': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/comma-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/consistent-generic-constructors': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-indexed-object-style': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-assertions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-definitions': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-exports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/explicit-function-return-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/explicit-member-accessibility': {
      hasSuggestions: true,
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/explicit-module-boundary-types': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/func-call-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/indent': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/init-declarations': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/key-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/keyword-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/lines-around-comment': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/lines-between-class-members': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/member-delimiter-style': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/member-ordering': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/method-signature-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/naming-convention': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-base-to-string': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-confusing-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-confusing-void-expression': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
      fixable: 'code',
      hasSuggestions: true,
    },
    '@typescript-eslint/no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-enum-values': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: false,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-duplicate-imports': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-dynamic-delete': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-empty-interface': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-explicit-any': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-extra-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-parens': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-semi': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extraneous-class': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-floating-promises': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-for-in-array': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-implicit-any-catch': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-implied-eval': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-import-type-side-effects': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-inferrable-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-void-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-meaningless-void-operator': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-misused-new': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-misused-promises': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-mixed-enums': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-namespace': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
      hasSuggestions: true,
    },
    '@typescript-eslint/no-non-null-asserted-optional-chain': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-parameter-properties': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-redundant-type-constituents': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-require-imports': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: undefined,
      schema: [Object],
    },
    '@typescript-eslint/no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-this-alias': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-throw-literal': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-type-alias': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    '@typescript-eslint/no-unnecessary-qualifier': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-arguments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-assertion': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-constraint': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unsafe-argument': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-assignment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-call': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-declaration-merging': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-enum-comparison': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-member-access': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-return': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-use-before-define': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-useless-constructor': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-useless-empty-export': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: false,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-var-requires': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/non-nullable-type-assertion-style': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/padding-line-between-statements': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: false,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/parameter-properties': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/prefer-as-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-enum-initializers': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-for-of': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-function-type': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-includes': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-literal-enum-member': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-namespace-keyword': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-nullish-coalescing': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-optional-chain': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-readonly': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-readonly-parameter-types': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/prefer-reduce-type-parameter': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
    },
    '@typescript-eslint/prefer-regexp-exec': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-return-this-type': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-string-starts-ends-with': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-ts-expect-error': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/promise-function-async': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/quotes': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-array-sort-compare': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/restrict-plus-operands': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/restrict-template-expressions': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/return-await': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      type: 'problem',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/semi': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/sort-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/sort-type-union-intersection-members': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      replacedBy: [Array],
      schema: [Array],
    },
    '@typescript-eslint/space-before-blocks': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-before-function-paren': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-infix-ops': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/strict-boolean-expressions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/switch-exhaustiveness-check': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/triple-slash-reference': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/type-annotation-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/typedef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/unbound-method': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/unified-signatures': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Array],
    },
  },
};
const b = {
  meta: {
    docs: {
      description: 'Disallow creating unstable components inside components',
      category: 'Possible Errors',
      recommended: false,
      url: 'https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md',
    },
    schema: [[Object]],
  },
};
const c = {
  ruleId: '@typescript-eslint/no-shadow',
  rulesMeta: {
    'accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-callback-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'array-element-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'arrow-body-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'arrow-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'arrow-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'block-scoped-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'block-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'brace-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'callback-return': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    camelcase: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'capitalized-comments': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'class-methods-use-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'comma-dangle': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'comma-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'comma-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    complexity: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'computed-property-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'consistent-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'consistent-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'constructor-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    curly: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'default-case': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'default-case-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'dot-location': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'eol-last': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    eqeqeq: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'for-direction': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'func-call-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'func-name-matching': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'function-call-argument-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'function-paren-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'generator-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'getter-return': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'global-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'grouped-accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'guard-for-in': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'handle-callback-err': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-blacklist': {
      deprecated: true,
      replacedBy: [Array],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-denylist': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-length': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-match': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'implicit-arrow-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    indent: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'indent-legacy': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'init-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'jsx-quotes': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'key-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'keyword-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'line-comment-position': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'linebreak-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-directive': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'lines-between-class-members': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'logical-assignment-operators': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
    },
    'max-classes-per-file': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-depth': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-len': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines-per-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-nested-callbacks': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'multiline-comment-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'multiline-ternary': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
      fixable: 'whitespace',
    },
    'new-cap': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'new-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'newline-after-var': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-before-return': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-per-chained-call': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-alert': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-async-promise-executor': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-await-in-loop': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-bitwise': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-buffer-constructor': {
      deprecated: true,
      replacedBy: [],
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-caller': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-case-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-catch-shadow': {
      type: 'suggestion',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-class-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-compare-neg-zero': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-cond-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-confusing-arrow': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-console': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      hasSuggestions: true,
      messages: [Object],
    },
    'no-const-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-binary-expression': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-condition': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-constructor-return': {
      type: 'problem',
      docs: [Object],
      schema: {},
      fixable: null,
      messages: [Object],
    },
    'no-continue': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-control-regex': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-debugger': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-delete-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-div-regex': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-dupe-args': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-else-if': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-keys': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-case': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-imports': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-else-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-empty': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-character-class': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-pattern': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-static-block': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eq-null': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-ex-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-extend-native': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-extra-bind': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-boolean-cast': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-label': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'no-extra-semi': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-fallthrough': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-floating-decimal': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-func-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-global-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-coercion': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implied-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-import-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-inline-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-inner-declarations': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-regexp': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-irregular-whitespace': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-iterator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-label-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-lone-blocks': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-lonely-if': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-misleading-character-class': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-mixed-operators': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-requires': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-spaces-and-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-multi-str': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-multiple-empty-lines': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-native-reassign': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [Array],
      messages: [Object],
    },
    'no-negated-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-negated-in-lhs': {
      type: 'problem',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-nested-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-native-nonconstructor': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-object': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      messages: [Object],
    },
    'no-new-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-symbol': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-wrappers': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-nonoctal-decimal-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-obj-calls': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-object-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-octal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-octal-escape': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-param-reassign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-path-concat': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-plusplus': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-process-env': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-process-exit': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-promise-executor-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'no-proto': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-prototype-builtins': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-regex-spaces': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-restricted-exports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-restricted-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    'no-restricted-modules': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-properties': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-syntax': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-return-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-return-await': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      deprecated: true,
      replacedBy: [],
      schema: [],
      messages: [Object],
    },
    'no-script-url': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-self-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-self-compare': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sequences': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-setter-return': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-shadow-restricted-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-spaced-func': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-sparse-arrays': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sync': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-template-curly-in-string': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-this-before-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-throw-literal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-trailing-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-undef': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-undef-init': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-undefined': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-underscore-dangle': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unexpected-multiline': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unmodified-loop-condition': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unneeded-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-unreachable': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unreachable-loop': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unsafe-finally': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unsafe-negation': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unsafe-optional-chaining': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unused-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-unused-private-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-use-before-define': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-useless-backreference': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-call': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-catch': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-computed-key': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-useless-concat': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-constructor': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'no-useless-rename': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-useless-return': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-void': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-warning-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-whitespace-before-property': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-with': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'nonblock-statement-body-position': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-property-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'object-shorthand': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'one-var': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'one-var-declaration-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'operator-assignment': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'operator-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'padded-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'padding-line-between-statements': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'prefer-arrow-callback': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-destructuring': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-exponentiation-operator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-named-capture-group': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'prefer-numeric-literals': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-has-own': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-promise-reject-errors': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'prefer-reflect': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [],
      schema: [Array],
      messages: [Object],
    },
    'prefer-regex-literals': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'prefer-rest-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'prefer-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: null,
      messages: [Object],
    },
    'prefer-template': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'quote-props': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    quotes: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    radix: {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'require-atomic-updates': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'require-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      deprecated: true,
      replacedBy: [],
      messages: [Object],
    },
    'require-unicode-regexp': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'require-yield': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'rest-spread-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    semi: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'semi-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'semi-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'sort-imports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'sort-keys': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'sort-vars': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'space-before-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-before-function-paren': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-in-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-infix-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-unary-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'spaced-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    strict: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'switch-colon-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'symbol-description': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'template-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'template-tag-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'unicode-bom': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'use-isnan': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'valid-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
      deprecated: true,
      replacedBy: [],
    },
    'valid-typeof': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'vars-on-top': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'wrap-iife': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'wrap-regex': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'yield-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    yoda: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prettier/prettier': {
      docs: [Object],
      type: 'layout',
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'eslint-comments/disable-enable-pair': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/no-aggregating-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-duplicate-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-restricted-disable': {
      docs: [Object],
      fixable: null,
      schema: [Object],
      type: 'suggestion',
    },
    'eslint-comments/no-unlimited-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-unused-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-unused-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-use': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/require-description': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'react/boolean-prop-naming': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/button-has-type': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/default-props-match-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/destructuring-assignment': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/display-name': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-component-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-dom-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-elements': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-foreign-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/function-component-definition': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/hook-use-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/iframe-missing-sandbox': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/jsx-boolean-value': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-child-element-spacing': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [],
    },
    'react/jsx-closing-bracket-location': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-closing-tag-location': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
    },
    'react/jsx-curly-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-curly-newline': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'react/jsx-equals-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-filename-extension': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-first-prop-new-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-handler-names': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-key': { docs: [Object], messages: [Object], schema: [Array] },
    'react/jsx-max-depth': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-max-props-per-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-newline': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-bind': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-comment-textnodes': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/jsx-no-constructed-context-values': {
      docs: [Object],
      messages: [Object],
      schema: {},
    },
    'react/jsx-no-duplicate-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-leaked-render': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    'react/jsx-no-literals': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-script-url': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-target-blank': {
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-useless-fragment': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-one-expression-per-line': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-undef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-curly-brace-presence': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-pascal-case': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-fragments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-props-no-multi-spaces': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/jsx-props-no-spreading': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-default-props': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-space-before-closing': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-tag-spacing': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-uses-react': { docs: [Object], schema: [] },
    'react/jsx-uses-vars': { docs: [Object], schema: [] },
    'react/jsx-wrap-multilines': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-invalid-html-attribute': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/no-access-state-in-setstate': { docs: [Object], messages: [Object] },
    'react/no-adjacent-inline-elements': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/no-array-index-key': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-arrow-function-lifecycle': {
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    'react/no-children-prop': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-danger': { docs: [Object], messages: [Object], schema: [] },
    'react/no-danger-with-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-deprecated': { docs: [Object], messages: [Object], schema: [] },
    'react/no-did-mount-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-did-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-direct-mutation-state': { docs: [Object], messages: [Object] },
    'react/no-find-dom-node': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-is-mounted': { docs: [Object], messages: [Object], schema: [] },
    'react/no-multi-comp': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-namespace': { docs: [Object], messages: [Object], schema: [] },
    'react/no-set-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-string-refs': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-redundant-should-component-update': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-render-return-value': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-this-in-sfc': { docs: [Object], messages: [Object], schema: [] },
    'react/no-typos': { docs: [Object], messages: [Object], schema: [] },
    'react/no-unescaped-entities': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unknown-property': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-unsafe': { docs: [Object], messages: [Object], schema: [Array] },
    'react/no-unstable-nested-components': { docs: [Object], schema: [Array] },
    'react/no-unused-class-component-methods': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-unused-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unused-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-object-type-as-default-prop': {
      docs: [Object],
      messages: [Object],
    },
    'react/no-will-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-es6-class': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-exact-props': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/prefer-read-only-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/prefer-stateless-function': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prop-types': { docs: [Object], messages: [Object], schema: [Array] },
    'react/react-in-jsx-scope': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/require-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-optimization': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-render-return': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/self-closing-comp': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/sort-comp': { docs: [Object], messages: [Object], schema: [Array] },
    'react/sort-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/sort-prop-types': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/state-in-constructor': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/static-property-placement': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [Array],
    },
    'react/style-prop-object': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/void-dom-elements-no-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react-hooks/rules-of-hooks': { type: 'problem', docs: [Object] },
    'react-hooks/exhaustive-deps': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      schema: [Array],
    },
    'react-native/no-unused-styles': { schema: [] },
    'react-native/no-inline-styles': { schema: [] },
    'react-native/no-color-literals': { schema: [] },
    'react-native/sort-styles': { fixable: 'code', schema: [Array] },
    'react-native/split-platform-components': {
      fixable: 'code',
      schema: [Array],
    },
    'react-native/no-raw-text': { schema: [Array] },
    'react-native/no-single-element-style-arrays': {
      docs: [Object],
      fixable: 'code',
    },
    '@react-native/platform-colors': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/consistent-test-it': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/expect-expect': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/max-expects': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/max-nested-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-alias-methods': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/no-commented-out-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-conditional-expect': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-conditional-in-test': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-deprecated-functions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      fixable: 'code',
    },
    'jest/no-disabled-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-done-callback': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-duplicate-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-export': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/no-focused-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/no-identical-title': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-if': {
      docs: [Object],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-interpolation-in-snapshots': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    'jest/no-jasmine-globals': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-jest-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-large-snapshots': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-mocks-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-restricted-matchers': {
      docs: [Object],
      type: 'suggestion',
      schema: [Array],
      messages: [Object],
    },
    'jest/no-standalone-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-test-prefixes': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-test-return-statement': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-called-with': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-comparison-matcher': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-each': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-equality-matcher': {
      docs: [Object],
      messages: [Object],
      hasSuggestions: true,
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-expect-assertions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      hasSuggestions: true,
      schema: [Array],
    },
    'jest/prefer-expect-resolves': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-in-order': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-on-top': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-lowercase-title': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'jest/prefer-mock-promise-shorthand': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      fixable: 'code',
    },
    'jest/prefer-snapshot-hint': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/prefer-spy-on': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-strict-equal': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      hasSuggestions: true,
    },
    'jest/prefer-to-be': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-contain': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-have-length': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-todo': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'layout',
    },
    'jest/require-hook': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/require-to-throw-message': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/require-top-level-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/unbound-method': {
      messages: [Object],
      schema: [Array],
      type: 'problem',
      docs: [Object],
    },
    'jest/valid-describe-callback': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/valid-expect-in-promise': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/valid-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/valid-title': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
      fixable: 'code',
    },
    'ft-flow/array-style-complex-type': { fixable: 'code' },
    'ft-flow/array-style-simple-type': { fixable: 'code' },
    'ft-flow/arrow-parens': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      type: 'layout',
    },
    'ft-flow/boolean-style': { fixable: 'code' },
    'ft-flow/define-flow-type': undefined,
    'ft-flow/delimiter-dangle': { fixable: 'code' },
    'ft-flow/enforce-line-break': { fixable: 'code' },
    'ft-flow/enforce-suppression-code': undefined,
    'ft-flow/generic-spacing': { fixable: 'whitespace' },
    'ft-flow/interface-id-match': undefined,
    'ft-flow/newline-after-flow-annotation': { fixable: 'code' },
    'ft-flow/no-dupe-keys': undefined,
    'ft-flow/no-duplicate-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/no-existential-type': undefined,
    'ft-flow/no-flow-fix-me-comments': undefined,
    'ft-flow/no-flow-suppressions-in-strict-files': undefined,
    'ft-flow/no-internal-flow-type': undefined,
    'ft-flow/no-mixed': undefined,
    'ft-flow/no-mutable-array': { fixable: 'code' },
    'ft-flow/no-primitive-constructor-types': undefined,
    'ft-flow/no-types-missing-file-annotation': undefined,
    'ft-flow/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'ft-flow/no-weak-types': undefined,
    'ft-flow/object-type-curly-spacing': { fixable: 'code' },
    'ft-flow/object-type-delimiter': { fixable: 'code' },
    'ft-flow/quotes': { fixable: 'code' },
    'ft-flow/require-compound-type-alias': undefined,
    'ft-flow/require-exact-type': { fixable: 'code' },
    'ft-flow/require-indexer-name': { fixable: 'code' },
    'ft-flow/require-inexact-type': undefined,
    'ft-flow/require-parameter-type': undefined,
    'ft-flow/require-readonly-react-props': undefined,
    'ft-flow/require-return-type': undefined,
    'ft-flow/require-types-at-top': undefined,
    'ft-flow/require-valid-file-annotation': { fixable: 'code' },
    'ft-flow/require-variable-type': undefined,
    'ft-flow/semi': { fixable: 'code' },
    'ft-flow/sort-keys': { fixable: 'code' },
    'ft-flow/sort-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/space-after-type-colon': { fixable: 'code' },
    'ft-flow/space-before-generic-bracket': { fixable: 'code' },
    'ft-flow/space-before-type-colon': { fixable: 'code' },
    'ft-flow/spread-exact-type': undefined,
    'ft-flow/type-id-match': undefined,
    'ft-flow/type-import-style': { fixable: 'code' },
    'ft-flow/union-intersection-spacing': { fixable: 'code' },
    'ft-flow/use-flow-type': undefined,
    'ft-flow/use-read-only-spread': { messages: [Object] },
    'ft-flow/valid-syntax': { deprecated: true },
    '@typescript-eslint/adjacent-overload-signatures': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/array-type': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/await-thenable': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/ban-ts-comment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/ban-tslint-comment': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/ban-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/block-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/brace-style': {
      type: 'layout',
      docs: [Object],
      messages: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/class-literal-property-style': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/comma-dangle': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/comma-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/consistent-generic-constructors': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-indexed-object-style': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-assertions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-definitions': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-exports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/explicit-function-return-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/explicit-member-accessibility': {
      hasSuggestions: true,
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/explicit-module-boundary-types': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/func-call-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/indent': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/init-declarations': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/key-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/keyword-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/lines-around-comment': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/lines-between-class-members': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/member-delimiter-style': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/member-ordering': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/method-signature-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/naming-convention': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-base-to-string': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-confusing-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-confusing-void-expression': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
      fixable: 'code',
      hasSuggestions: true,
    },
    '@typescript-eslint/no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-enum-values': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: false,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-duplicate-imports': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-dynamic-delete': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-empty-interface': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-explicit-any': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-extra-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-parens': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-semi': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extraneous-class': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-floating-promises': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-for-in-array': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-implicit-any-catch': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-implied-eval': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-import-type-side-effects': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-inferrable-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-void-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-meaningless-void-operator': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-misused-new': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-misused-promises': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-mixed-enums': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-namespace': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
      hasSuggestions: true,
    },
    '@typescript-eslint/no-non-null-asserted-optional-chain': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-parameter-properties': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-redundant-type-constituents': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-require-imports': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: undefined,
      schema: [Object],
    },
    '@typescript-eslint/no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-this-alias': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-throw-literal': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-type-alias': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    '@typescript-eslint/no-unnecessary-qualifier': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-arguments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-assertion': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-constraint': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unsafe-argument': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-assignment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-call': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-declaration-merging': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-enum-comparison': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-member-access': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-return': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-use-before-define': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-useless-constructor': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-useless-empty-export': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: false,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-var-requires': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/non-nullable-type-assertion-style': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/padding-line-between-statements': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: false,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/parameter-properties': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/prefer-as-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-enum-initializers': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-for-of': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-function-type': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-includes': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-literal-enum-member': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-namespace-keyword': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-nullish-coalescing': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-optional-chain': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-readonly': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-readonly-parameter-types': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/prefer-reduce-type-parameter': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
    },
    '@typescript-eslint/prefer-regexp-exec': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-return-this-type': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-string-starts-ends-with': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-ts-expect-error': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/promise-function-async': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/quotes': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-array-sort-compare': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/restrict-plus-operands': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/restrict-template-expressions': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/return-await': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      type: 'problem',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/semi': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/sort-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/sort-type-union-intersection-members': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      replacedBy: [Array],
      schema: [Array],
    },
    '@typescript-eslint/space-before-blocks': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-before-function-paren': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-infix-ops': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/strict-boolean-expressions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/switch-exhaustiveness-check': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/triple-slash-reference': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/type-annotation-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/typedef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/unbound-method': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/unified-signatures': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Array],
    },
  },
};
const d = {
  meta: {
    type: 'suggestion',
    docs: {
      description:
        'Disallow variable declarations from shadowing variables declared in the outer scope',
      recommended: false,
      extendsBaseRule: true,
      url: 'https://typescript-eslint.io/rules/no-shadow',
    },
    schema: [[Object]],
    messages: {
      noShadow:
        "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
      noShadowGlobal: "'{{name}}' is already a global variable.",
    },
  },
};
const e = {
  ruleId: 'no-alert',
  rulesMeta: {
    'accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-callback-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'array-element-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'arrow-body-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'arrow-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'arrow-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'block-scoped-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'block-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'brace-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'callback-return': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    camelcase: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'capitalized-comments': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'class-methods-use-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'comma-dangle': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'comma-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'comma-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    complexity: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'computed-property-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'consistent-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'consistent-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'constructor-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    curly: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'default-case': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'default-case-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'dot-location': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'eol-last': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    eqeqeq: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'for-direction': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'func-call-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'func-name-matching': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'function-call-argument-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'function-paren-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'generator-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'getter-return': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'global-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'grouped-accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'guard-for-in': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'handle-callback-err': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-blacklist': {
      deprecated: true,
      replacedBy: [Array],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-denylist': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-length': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-match': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'implicit-arrow-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    indent: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'indent-legacy': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'init-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'jsx-quotes': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'key-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'keyword-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'line-comment-position': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'linebreak-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-directive': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'lines-between-class-members': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'logical-assignment-operators': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
    },
    'max-classes-per-file': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-depth': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-len': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines-per-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-nested-callbacks': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'multiline-comment-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'multiline-ternary': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
      fixable: 'whitespace',
    },
    'new-cap': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'new-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'newline-after-var': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-before-return': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-per-chained-call': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-alert': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-async-promise-executor': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-await-in-loop': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-bitwise': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-buffer-constructor': {
      deprecated: true,
      replacedBy: [],
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-caller': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-case-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-catch-shadow': {
      type: 'suggestion',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-class-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-compare-neg-zero': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-cond-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-confusing-arrow': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-console': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      hasSuggestions: true,
      messages: [Object],
    },
    'no-const-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-binary-expression': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-condition': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-constructor-return': {
      type: 'problem',
      docs: [Object],
      schema: {},
      fixable: null,
      messages: [Object],
    },
    'no-continue': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-control-regex': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-debugger': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-delete-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-div-regex': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-dupe-args': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-else-if': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-keys': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-case': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-imports': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-else-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-empty': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-character-class': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-pattern': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-static-block': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eq-null': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-ex-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-extend-native': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-extra-bind': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-boolean-cast': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-label': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'no-extra-semi': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-fallthrough': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-floating-decimal': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-func-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-global-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-coercion': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implied-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-import-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-inline-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-inner-declarations': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-regexp': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-irregular-whitespace': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-iterator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-label-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-lone-blocks': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-lonely-if': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-misleading-character-class': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-mixed-operators': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-requires': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-spaces-and-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-multi-str': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-multiple-empty-lines': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-native-reassign': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [Array],
      messages: [Object],
    },
    'no-negated-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-negated-in-lhs': {
      type: 'problem',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-nested-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-native-nonconstructor': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-object': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      messages: [Object],
    },
    'no-new-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-symbol': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-wrappers': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-nonoctal-decimal-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-obj-calls': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-object-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-octal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-octal-escape': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-param-reassign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-path-concat': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-plusplus': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-process-env': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-process-exit': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-promise-executor-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'no-proto': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-prototype-builtins': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-regex-spaces': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-restricted-exports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-restricted-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    'no-restricted-modules': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-properties': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-syntax': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-return-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-return-await': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      deprecated: true,
      replacedBy: [],
      schema: [],
      messages: [Object],
    },
    'no-script-url': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-self-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-self-compare': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sequences': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-setter-return': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-shadow-restricted-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-spaced-func': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-sparse-arrays': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sync': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-template-curly-in-string': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-this-before-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-throw-literal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-trailing-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-undef': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-undef-init': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-undefined': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-underscore-dangle': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unexpected-multiline': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unmodified-loop-condition': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unneeded-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-unreachable': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unreachable-loop': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unsafe-finally': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unsafe-negation': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unsafe-optional-chaining': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unused-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-unused-private-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-use-before-define': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-useless-backreference': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-call': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-catch': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-computed-key': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-useless-concat': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-constructor': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'no-useless-rename': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-useless-return': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-void': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-warning-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-whitespace-before-property': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-with': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'nonblock-statement-body-position': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-property-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'object-shorthand': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'one-var': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'one-var-declaration-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'operator-assignment': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'operator-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'padded-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'padding-line-between-statements': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'prefer-arrow-callback': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-destructuring': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-exponentiation-operator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-named-capture-group': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'prefer-numeric-literals': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-has-own': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-promise-reject-errors': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'prefer-reflect': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [],
      schema: [Array],
      messages: [Object],
    },
    'prefer-regex-literals': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'prefer-rest-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'prefer-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: null,
      messages: [Object],
    },
    'prefer-template': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'quote-props': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    quotes: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    radix: {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'require-atomic-updates': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'require-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      deprecated: true,
      replacedBy: [],
      messages: [Object],
    },
    'require-unicode-regexp': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'require-yield': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'rest-spread-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    semi: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'semi-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'semi-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'sort-imports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'sort-keys': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'sort-vars': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'space-before-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-before-function-paren': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-in-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-infix-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-unary-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'spaced-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    strict: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'switch-colon-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'symbol-description': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'template-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'template-tag-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'unicode-bom': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'use-isnan': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'valid-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
      deprecated: true,
      replacedBy: [],
    },
    'valid-typeof': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'vars-on-top': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'wrap-iife': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'wrap-regex': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'yield-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    yoda: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prettier/prettier': {
      docs: [Object],
      type: 'layout',
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'eslint-comments/disable-enable-pair': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/no-aggregating-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-duplicate-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-restricted-disable': {
      docs: [Object],
      fixable: null,
      schema: [Object],
      type: 'suggestion',
    },
    'eslint-comments/no-unlimited-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-unused-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-unused-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-use': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/require-description': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'react/boolean-prop-naming': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/button-has-type': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/default-props-match-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/destructuring-assignment': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/display-name': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-component-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-dom-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-elements': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-foreign-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/function-component-definition': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/hook-use-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/iframe-missing-sandbox': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/jsx-boolean-value': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-child-element-spacing': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [],
    },
    'react/jsx-closing-bracket-location': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-closing-tag-location': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
    },
    'react/jsx-curly-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-curly-newline': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'react/jsx-equals-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-filename-extension': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-first-prop-new-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-handler-names': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-key': { docs: [Object], messages: [Object], schema: [Array] },
    'react/jsx-max-depth': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-max-props-per-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-newline': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-bind': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-comment-textnodes': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/jsx-no-constructed-context-values': {
      docs: [Object],
      messages: [Object],
      schema: {},
    },
    'react/jsx-no-duplicate-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-leaked-render': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    'react/jsx-no-literals': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-script-url': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-target-blank': {
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-useless-fragment': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-one-expression-per-line': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-undef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-curly-brace-presence': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-pascal-case': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-fragments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-props-no-multi-spaces': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/jsx-props-no-spreading': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-default-props': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-space-before-closing': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-tag-spacing': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-uses-react': { docs: [Object], schema: [] },
    'react/jsx-uses-vars': { docs: [Object], schema: [] },
    'react/jsx-wrap-multilines': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-invalid-html-attribute': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/no-access-state-in-setstate': { docs: [Object], messages: [Object] },
    'react/no-adjacent-inline-elements': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/no-array-index-key': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-arrow-function-lifecycle': {
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    'react/no-children-prop': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-danger': { docs: [Object], messages: [Object], schema: [] },
    'react/no-danger-with-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-deprecated': { docs: [Object], messages: [Object], schema: [] },
    'react/no-did-mount-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-did-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-direct-mutation-state': { docs: [Object], messages: [Object] },
    'react/no-find-dom-node': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-is-mounted': { docs: [Object], messages: [Object], schema: [] },
    'react/no-multi-comp': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-namespace': { docs: [Object], messages: [Object], schema: [] },
    'react/no-set-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-string-refs': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-redundant-should-component-update': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-render-return-value': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-this-in-sfc': { docs: [Object], messages: [Object], schema: [] },
    'react/no-typos': { docs: [Object], messages: [Object], schema: [] },
    'react/no-unescaped-entities': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unknown-property': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-unsafe': { docs: [Object], messages: [Object], schema: [Array] },
    'react/no-unstable-nested-components': { docs: [Object], schema: [Array] },
    'react/no-unused-class-component-methods': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-unused-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unused-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-object-type-as-default-prop': {
      docs: [Object],
      messages: [Object],
    },
    'react/no-will-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-es6-class': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-exact-props': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/prefer-read-only-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/prefer-stateless-function': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prop-types': { docs: [Object], messages: [Object], schema: [Array] },
    'react/react-in-jsx-scope': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/require-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-optimization': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-render-return': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/self-closing-comp': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/sort-comp': { docs: [Object], messages: [Object], schema: [Array] },
    'react/sort-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/sort-prop-types': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/state-in-constructor': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/static-property-placement': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [Array],
    },
    'react/style-prop-object': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/void-dom-elements-no-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react-hooks/rules-of-hooks': { type: 'problem', docs: [Object] },
    'react-hooks/exhaustive-deps': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      schema: [Array],
    },
    'react-native/no-unused-styles': { schema: [] },
    'react-native/no-inline-styles': { schema: [] },
    'react-native/no-color-literals': { schema: [] },
    'react-native/sort-styles': { fixable: 'code', schema: [Array] },
    'react-native/split-platform-components': {
      fixable: 'code',
      schema: [Array],
    },
    'react-native/no-raw-text': { schema: [Array] },
    'react-native/no-single-element-style-arrays': {
      docs: [Object],
      fixable: 'code',
    },
    '@react-native/platform-colors': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/consistent-test-it': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/expect-expect': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/max-expects': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/max-nested-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-alias-methods': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/no-commented-out-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-conditional-expect': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-conditional-in-test': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-deprecated-functions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      fixable: 'code',
    },
    'jest/no-disabled-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-done-callback': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-duplicate-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-export': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/no-focused-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/no-identical-title': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-if': {
      docs: [Object],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-interpolation-in-snapshots': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    'jest/no-jasmine-globals': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-jest-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-large-snapshots': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-mocks-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-restricted-matchers': {
      docs: [Object],
      type: 'suggestion',
      schema: [Array],
      messages: [Object],
    },
    'jest/no-standalone-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-test-prefixes': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-test-return-statement': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-called-with': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-comparison-matcher': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-each': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-equality-matcher': {
      docs: [Object],
      messages: [Object],
      hasSuggestions: true,
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-expect-assertions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      hasSuggestions: true,
      schema: [Array],
    },
    'jest/prefer-expect-resolves': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-in-order': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-on-top': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-lowercase-title': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'jest/prefer-mock-promise-shorthand': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      fixable: 'code',
    },
    'jest/prefer-snapshot-hint': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/prefer-spy-on': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-strict-equal': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      hasSuggestions: true,
    },
    'jest/prefer-to-be': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-contain': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-have-length': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-todo': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'layout',
    },
    'jest/require-hook': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/require-to-throw-message': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/require-top-level-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/unbound-method': {
      messages: [Object],
      schema: [Array],
      type: 'problem',
      docs: [Object],
    },
    'jest/valid-describe-callback': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/valid-expect-in-promise': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/valid-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/valid-title': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
      fixable: 'code',
    },
    'ft-flow/array-style-complex-type': { fixable: 'code' },
    'ft-flow/array-style-simple-type': { fixable: 'code' },
    'ft-flow/arrow-parens': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      type: 'layout',
    },
    'ft-flow/boolean-style': { fixable: 'code' },
    'ft-flow/define-flow-type': undefined,
    'ft-flow/delimiter-dangle': { fixable: 'code' },
    'ft-flow/enforce-line-break': { fixable: 'code' },
    'ft-flow/enforce-suppression-code': undefined,
    'ft-flow/generic-spacing': { fixable: 'whitespace' },
    'ft-flow/interface-id-match': undefined,
    'ft-flow/newline-after-flow-annotation': { fixable: 'code' },
    'ft-flow/no-dupe-keys': undefined,
    'ft-flow/no-duplicate-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/no-existential-type': undefined,
    'ft-flow/no-flow-fix-me-comments': undefined,
    'ft-flow/no-flow-suppressions-in-strict-files': undefined,
    'ft-flow/no-internal-flow-type': undefined,
    'ft-flow/no-mixed': undefined,
    'ft-flow/no-mutable-array': { fixable: 'code' },
    'ft-flow/no-primitive-constructor-types': undefined,
    'ft-flow/no-types-missing-file-annotation': undefined,
    'ft-flow/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'ft-flow/no-weak-types': undefined,
    'ft-flow/object-type-curly-spacing': { fixable: 'code' },
    'ft-flow/object-type-delimiter': { fixable: 'code' },
    'ft-flow/quotes': { fixable: 'code' },
    'ft-flow/require-compound-type-alias': undefined,
    'ft-flow/require-exact-type': { fixable: 'code' },
    'ft-flow/require-indexer-name': { fixable: 'code' },
    'ft-flow/require-inexact-type': undefined,
    'ft-flow/require-parameter-type': undefined,
    'ft-flow/require-readonly-react-props': undefined,
    'ft-flow/require-return-type': undefined,
    'ft-flow/require-types-at-top': undefined,
    'ft-flow/require-valid-file-annotation': { fixable: 'code' },
    'ft-flow/require-variable-type': undefined,
    'ft-flow/semi': { fixable: 'code' },
    'ft-flow/sort-keys': { fixable: 'code' },
    'ft-flow/sort-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/space-after-type-colon': { fixable: 'code' },
    'ft-flow/space-before-generic-bracket': { fixable: 'code' },
    'ft-flow/space-before-type-colon': { fixable: 'code' },
    'ft-flow/spread-exact-type': undefined,
    'ft-flow/type-id-match': undefined,
    'ft-flow/type-import-style': { fixable: 'code' },
    'ft-flow/union-intersection-spacing': { fixable: 'code' },
    'ft-flow/use-flow-type': undefined,
    'ft-flow/use-read-only-spread': { messages: [Object] },
    'ft-flow/valid-syntax': { deprecated: true },
    '@typescript-eslint/adjacent-overload-signatures': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/array-type': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/await-thenable': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/ban-ts-comment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/ban-tslint-comment': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/ban-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/block-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/brace-style': {
      type: 'layout',
      docs: [Object],
      messages: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/class-literal-property-style': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/comma-dangle': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/comma-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/consistent-generic-constructors': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-indexed-object-style': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-assertions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-definitions': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-exports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/explicit-function-return-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/explicit-member-accessibility': {
      hasSuggestions: true,
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/explicit-module-boundary-types': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/func-call-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/indent': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/init-declarations': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/key-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/keyword-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/lines-around-comment': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/lines-between-class-members': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/member-delimiter-style': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/member-ordering': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/method-signature-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/naming-convention': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-base-to-string': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-confusing-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-confusing-void-expression': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
      fixable: 'code',
      hasSuggestions: true,
    },
    '@typescript-eslint/no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-enum-values': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: false,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-duplicate-imports': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-dynamic-delete': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-empty-interface': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-explicit-any': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-extra-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-parens': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-semi': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extraneous-class': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-floating-promises': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-for-in-array': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-implicit-any-catch': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-implied-eval': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-import-type-side-effects': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-inferrable-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-void-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-meaningless-void-operator': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-misused-new': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-misused-promises': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-mixed-enums': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-namespace': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
      hasSuggestions: true,
    },
    '@typescript-eslint/no-non-null-asserted-optional-chain': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-parameter-properties': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-redundant-type-constituents': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-require-imports': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: undefined,
      schema: [Object],
    },
    '@typescript-eslint/no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-this-alias': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-throw-literal': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-type-alias': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    '@typescript-eslint/no-unnecessary-qualifier': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-arguments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-assertion': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-constraint': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unsafe-argument': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-assignment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-call': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-declaration-merging': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-enum-comparison': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-member-access': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-return': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-use-before-define': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-useless-constructor': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-useless-empty-export': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: false,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-var-requires': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/non-nullable-type-assertion-style': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/padding-line-between-statements': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: false,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/parameter-properties': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/prefer-as-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-enum-initializers': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-for-of': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-function-type': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-includes': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-literal-enum-member': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-namespace-keyword': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-nullish-coalescing': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-optional-chain': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-readonly': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-readonly-parameter-types': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/prefer-reduce-type-parameter': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
    },
    '@typescript-eslint/prefer-regexp-exec': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-return-this-type': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-string-starts-ends-with': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-ts-expect-error': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/promise-function-async': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/quotes': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-array-sort-compare': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/restrict-plus-operands': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/restrict-template-expressions': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/return-await': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      type: 'problem',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/semi': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/sort-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/sort-type-union-intersection-members': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      replacedBy: [Array],
      schema: [Array],
    },
    '@typescript-eslint/space-before-blocks': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-before-function-paren': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-infix-ops': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/strict-boolean-expressions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/switch-exhaustiveness-check': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/triple-slash-reference': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/type-annotation-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/typedef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/unbound-method': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/unified-signatures': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Array],
    },
  },
};
const f = {
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Disallow the use of `alert`, `confirm`, and `prompt`',
      recommended: false,
      url: 'https://eslint.org/docs/latest/rules/no-alert',
    },
    schema: [],
    messages: { unexpected: 'Unexpected {{name}}.' },
  },
};
const g = {
  ruleId: 'react/react-in-jsx-scope',
  rulesMeta: {
    'accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-callback-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'array-element-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'arrow-body-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'arrow-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'arrow-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'block-scoped-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'block-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'brace-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'callback-return': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    camelcase: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'capitalized-comments': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'class-methods-use-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'comma-dangle': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'comma-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'comma-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    complexity: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'computed-property-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'consistent-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'consistent-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'constructor-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    curly: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'default-case': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'default-case-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'dot-location': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'eol-last': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    eqeqeq: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'for-direction': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'func-call-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'func-name-matching': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'function-call-argument-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'function-paren-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'generator-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'getter-return': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'global-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'grouped-accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'guard-for-in': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'handle-callback-err': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-blacklist': {
      deprecated: true,
      replacedBy: [Array],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-denylist': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-length': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-match': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'implicit-arrow-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    indent: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'indent-legacy': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'init-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'jsx-quotes': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'key-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'keyword-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'line-comment-position': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'linebreak-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-directive': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'lines-between-class-members': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'logical-assignment-operators': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
    },
    'max-classes-per-file': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-depth': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-len': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines-per-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-nested-callbacks': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'multiline-comment-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'multiline-ternary': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
      fixable: 'whitespace',
    },
    'new-cap': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'new-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'newline-after-var': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-before-return': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-per-chained-call': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-alert': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-async-promise-executor': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-await-in-loop': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-bitwise': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-buffer-constructor': {
      deprecated: true,
      replacedBy: [],
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-caller': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-case-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-catch-shadow': {
      type: 'suggestion',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-class-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-compare-neg-zero': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-cond-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-confusing-arrow': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-console': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      hasSuggestions: true,
      messages: [Object],
    },
    'no-const-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-binary-expression': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-condition': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-constructor-return': {
      type: 'problem',
      docs: [Object],
      schema: {},
      fixable: null,
      messages: [Object],
    },
    'no-continue': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-control-regex': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-debugger': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-delete-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-div-regex': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-dupe-args': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-else-if': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-keys': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-case': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-imports': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-else-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-empty': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-character-class': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-pattern': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-static-block': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eq-null': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-ex-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-extend-native': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-extra-bind': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-boolean-cast': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-label': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'no-extra-semi': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-fallthrough': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-floating-decimal': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-func-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-global-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-coercion': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implied-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-import-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-inline-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-inner-declarations': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-regexp': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-irregular-whitespace': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-iterator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-label-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-lone-blocks': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-lonely-if': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-misleading-character-class': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-mixed-operators': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-requires': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-spaces-and-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-multi-str': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-multiple-empty-lines': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-native-reassign': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [Array],
      messages: [Object],
    },
    'no-negated-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-negated-in-lhs': {
      type: 'problem',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-nested-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-native-nonconstructor': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-object': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      messages: [Object],
    },
    'no-new-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-symbol': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-wrappers': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-nonoctal-decimal-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-obj-calls': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-object-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-octal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-octal-escape': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-param-reassign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-path-concat': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-plusplus': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-process-env': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-process-exit': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-promise-executor-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'no-proto': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-prototype-builtins': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-regex-spaces': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-restricted-exports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-restricted-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    'no-restricted-modules': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-properties': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-syntax': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-return-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-return-await': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      deprecated: true,
      replacedBy: [],
      schema: [],
      messages: [Object],
    },
    'no-script-url': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-self-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-self-compare': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sequences': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-setter-return': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-shadow-restricted-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-spaced-func': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-sparse-arrays': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sync': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-template-curly-in-string': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-this-before-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-throw-literal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-trailing-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-undef': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-undef-init': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-undefined': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-underscore-dangle': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unexpected-multiline': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unmodified-loop-condition': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unneeded-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-unreachable': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unreachable-loop': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unsafe-finally': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unsafe-negation': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unsafe-optional-chaining': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unused-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-unused-private-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-use-before-define': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-useless-backreference': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-call': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-catch': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-computed-key': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-useless-concat': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-constructor': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'no-useless-rename': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-useless-return': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-void': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-warning-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-whitespace-before-property': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-with': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'nonblock-statement-body-position': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-property-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'object-shorthand': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'one-var': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'one-var-declaration-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'operator-assignment': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'operator-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'padded-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'padding-line-between-statements': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'prefer-arrow-callback': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-destructuring': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-exponentiation-operator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-named-capture-group': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'prefer-numeric-literals': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-has-own': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-promise-reject-errors': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'prefer-reflect': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [],
      schema: [Array],
      messages: [Object],
    },
    'prefer-regex-literals': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'prefer-rest-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'prefer-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: null,
      messages: [Object],
    },
    'prefer-template': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'quote-props': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    quotes: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    radix: {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'require-atomic-updates': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'require-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      deprecated: true,
      replacedBy: [],
      messages: [Object],
    },
    'require-unicode-regexp': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'require-yield': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'rest-spread-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    semi: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'semi-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'semi-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'sort-imports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'sort-keys': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'sort-vars': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'space-before-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-before-function-paren': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-in-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-infix-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-unary-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'spaced-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    strict: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'switch-colon-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'symbol-description': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'template-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'template-tag-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'unicode-bom': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'use-isnan': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'valid-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
      deprecated: true,
      replacedBy: [],
    },
    'valid-typeof': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'vars-on-top': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'wrap-iife': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'wrap-regex': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'yield-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    yoda: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prettier/prettier': {
      docs: [Object],
      type: 'layout',
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'eslint-comments/disable-enable-pair': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/no-aggregating-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-duplicate-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-restricted-disable': {
      docs: [Object],
      fixable: null,
      schema: [Object],
      type: 'suggestion',
    },
    'eslint-comments/no-unlimited-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-unused-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-unused-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-use': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/require-description': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'react/boolean-prop-naming': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/button-has-type': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/default-props-match-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/destructuring-assignment': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/display-name': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-component-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-dom-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-elements': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-foreign-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/function-component-definition': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/hook-use-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/iframe-missing-sandbox': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/jsx-boolean-value': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-child-element-spacing': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [],
    },
    'react/jsx-closing-bracket-location': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-closing-tag-location': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
    },
    'react/jsx-curly-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-curly-newline': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'react/jsx-equals-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-filename-extension': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-first-prop-new-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-handler-names': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-key': { docs: [Object], messages: [Object], schema: [Array] },
    'react/jsx-max-depth': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-max-props-per-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-newline': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-bind': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-comment-textnodes': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/jsx-no-constructed-context-values': {
      docs: [Object],
      messages: [Object],
      schema: {},
    },
    'react/jsx-no-duplicate-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-leaked-render': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    'react/jsx-no-literals': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-script-url': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-target-blank': {
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-useless-fragment': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-one-expression-per-line': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-undef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-curly-brace-presence': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-pascal-case': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-fragments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-props-no-multi-spaces': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/jsx-props-no-spreading': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-default-props': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-space-before-closing': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-tag-spacing': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-uses-react': { docs: [Object], schema: [] },
    'react/jsx-uses-vars': { docs: [Object], schema: [] },
    'react/jsx-wrap-multilines': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-invalid-html-attribute': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/no-access-state-in-setstate': { docs: [Object], messages: [Object] },
    'react/no-adjacent-inline-elements': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/no-array-index-key': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-arrow-function-lifecycle': {
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    'react/no-children-prop': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-danger': { docs: [Object], messages: [Object], schema: [] },
    'react/no-danger-with-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-deprecated': { docs: [Object], messages: [Object], schema: [] },
    'react/no-did-mount-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-did-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-direct-mutation-state': { docs: [Object], messages: [Object] },
    'react/no-find-dom-node': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-is-mounted': { docs: [Object], messages: [Object], schema: [] },
    'react/no-multi-comp': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-namespace': { docs: [Object], messages: [Object], schema: [] },
    'react/no-set-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-string-refs': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-redundant-should-component-update': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-render-return-value': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-this-in-sfc': { docs: [Object], messages: [Object], schema: [] },
    'react/no-typos': { docs: [Object], messages: [Object], schema: [] },
    'react/no-unescaped-entities': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unknown-property': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-unsafe': { docs: [Object], messages: [Object], schema: [Array] },
    'react/no-unstable-nested-components': { docs: [Object], schema: [Array] },
    'react/no-unused-class-component-methods': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-unused-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unused-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-object-type-as-default-prop': {
      docs: [Object],
      messages: [Object],
    },
    'react/no-will-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-es6-class': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-exact-props': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/prefer-read-only-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/prefer-stateless-function': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prop-types': { docs: [Object], messages: [Object], schema: [Array] },
    'react/react-in-jsx-scope': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/require-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-optimization': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-render-return': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/self-closing-comp': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/sort-comp': { docs: [Object], messages: [Object], schema: [Array] },
    'react/sort-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/sort-prop-types': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/state-in-constructor': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/static-property-placement': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [Array],
    },
    'react/style-prop-object': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/void-dom-elements-no-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react-hooks/rules-of-hooks': { type: 'problem', docs: [Object] },
    'react-hooks/exhaustive-deps': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      schema: [Array],
    },
    'react-native/no-unused-styles': { schema: [] },
    'react-native/no-inline-styles': { schema: [] },
    'react-native/no-color-literals': { schema: [] },
    'react-native/sort-styles': { fixable: 'code', schema: [Array] },
    'react-native/split-platform-components': {
      fixable: 'code',
      schema: [Array],
    },
    'react-native/no-raw-text': { schema: [Array] },
    'react-native/no-single-element-style-arrays': {
      docs: [Object],
      fixable: 'code',
    },
    '@react-native/platform-colors': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/consistent-test-it': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/expect-expect': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/max-expects': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/max-nested-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-alias-methods': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/no-commented-out-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-conditional-expect': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-conditional-in-test': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-deprecated-functions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      fixable: 'code',
    },
    'jest/no-disabled-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-done-callback': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-duplicate-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-export': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/no-focused-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/no-identical-title': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-if': {
      docs: [Object],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-interpolation-in-snapshots': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    'jest/no-jasmine-globals': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-jest-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-large-snapshots': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-mocks-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-restricted-matchers': {
      docs: [Object],
      type: 'suggestion',
      schema: [Array],
      messages: [Object],
    },
    'jest/no-standalone-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-test-prefixes': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-test-return-statement': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-called-with': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-comparison-matcher': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-each': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-equality-matcher': {
      docs: [Object],
      messages: [Object],
      hasSuggestions: true,
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-expect-assertions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      hasSuggestions: true,
      schema: [Array],
    },
    'jest/prefer-expect-resolves': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-in-order': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-on-top': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-lowercase-title': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'jest/prefer-mock-promise-shorthand': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      fixable: 'code',
    },
    'jest/prefer-snapshot-hint': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/prefer-spy-on': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-strict-equal': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      hasSuggestions: true,
    },
    'jest/prefer-to-be': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-contain': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-have-length': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-todo': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'layout',
    },
    'jest/require-hook': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/require-to-throw-message': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/require-top-level-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/unbound-method': {
      messages: [Object],
      schema: [Array],
      type: 'problem',
      docs: [Object],
    },
    'jest/valid-describe-callback': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/valid-expect-in-promise': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/valid-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/valid-title': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
      fixable: 'code',
    },
    'ft-flow/array-style-complex-type': { fixable: 'code' },
    'ft-flow/array-style-simple-type': { fixable: 'code' },
    'ft-flow/arrow-parens': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      type: 'layout',
    },
    'ft-flow/boolean-style': { fixable: 'code' },
    'ft-flow/define-flow-type': undefined,
    'ft-flow/delimiter-dangle': { fixable: 'code' },
    'ft-flow/enforce-line-break': { fixable: 'code' },
    'ft-flow/enforce-suppression-code': undefined,
    'ft-flow/generic-spacing': { fixable: 'whitespace' },
    'ft-flow/interface-id-match': undefined,
    'ft-flow/newline-after-flow-annotation': { fixable: 'code' },
    'ft-flow/no-dupe-keys': undefined,
    'ft-flow/no-duplicate-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/no-existential-type': undefined,
    'ft-flow/no-flow-fix-me-comments': undefined,
    'ft-flow/no-flow-suppressions-in-strict-files': undefined,
    'ft-flow/no-internal-flow-type': undefined,
    'ft-flow/no-mixed': undefined,
    'ft-flow/no-mutable-array': { fixable: 'code' },
    'ft-flow/no-primitive-constructor-types': undefined,
    'ft-flow/no-types-missing-file-annotation': undefined,
    'ft-flow/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'ft-flow/no-weak-types': undefined,
    'ft-flow/object-type-curly-spacing': { fixable: 'code' },
    'ft-flow/object-type-delimiter': { fixable: 'code' },
    'ft-flow/quotes': { fixable: 'code' },
    'ft-flow/require-compound-type-alias': undefined,
    'ft-flow/require-exact-type': { fixable: 'code' },
    'ft-flow/require-indexer-name': { fixable: 'code' },
    'ft-flow/require-inexact-type': undefined,
    'ft-flow/require-parameter-type': undefined,
    'ft-flow/require-readonly-react-props': undefined,
    'ft-flow/require-return-type': undefined,
    'ft-flow/require-types-at-top': undefined,
    'ft-flow/require-valid-file-annotation': { fixable: 'code' },
    'ft-flow/require-variable-type': undefined,
    'ft-flow/semi': { fixable: 'code' },
    'ft-flow/sort-keys': { fixable: 'code' },
    'ft-flow/sort-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/space-after-type-colon': { fixable: 'code' },
    'ft-flow/space-before-generic-bracket': { fixable: 'code' },
    'ft-flow/space-before-type-colon': { fixable: 'code' },
    'ft-flow/spread-exact-type': undefined,
    'ft-flow/type-id-match': undefined,
    'ft-flow/type-import-style': { fixable: 'code' },
    'ft-flow/union-intersection-spacing': { fixable: 'code' },
    'ft-flow/use-flow-type': undefined,
    'ft-flow/use-read-only-spread': { messages: [Object] },
    'ft-flow/valid-syntax': { deprecated: true },
    '@typescript-eslint/adjacent-overload-signatures': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/array-type': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/await-thenable': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/ban-ts-comment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/ban-tslint-comment': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/ban-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/block-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/brace-style': {
      type: 'layout',
      docs: [Object],
      messages: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/class-literal-property-style': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/comma-dangle': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/comma-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/consistent-generic-constructors': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-indexed-object-style': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-assertions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-definitions': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-exports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/explicit-function-return-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/explicit-member-accessibility': {
      hasSuggestions: true,
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/explicit-module-boundary-types': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/func-call-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/indent': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/init-declarations': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/key-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/keyword-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/lines-around-comment': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/lines-between-class-members': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/member-delimiter-style': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/member-ordering': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/method-signature-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/naming-convention': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-base-to-string': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-confusing-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-confusing-void-expression': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
      fixable: 'code',
      hasSuggestions: true,
    },
    '@typescript-eslint/no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-enum-values': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: false,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-duplicate-imports': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-dynamic-delete': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-empty-interface': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-explicit-any': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-extra-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-parens': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-semi': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extraneous-class': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-floating-promises': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-for-in-array': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-implicit-any-catch': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-implied-eval': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-import-type-side-effects': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-inferrable-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-void-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-meaningless-void-operator': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-misused-new': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-misused-promises': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-mixed-enums': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-namespace': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
      hasSuggestions: true,
    },
    '@typescript-eslint/no-non-null-asserted-optional-chain': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-parameter-properties': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-redundant-type-constituents': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-require-imports': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: undefined,
      schema: [Object],
    },
    '@typescript-eslint/no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-this-alias': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-throw-literal': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-type-alias': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    '@typescript-eslint/no-unnecessary-qualifier': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-arguments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-assertion': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-constraint': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unsafe-argument': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-assignment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-call': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-declaration-merging': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-enum-comparison': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-member-access': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-return': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-use-before-define': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-useless-constructor': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-useless-empty-export': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: false,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-var-requires': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/non-nullable-type-assertion-style': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/padding-line-between-statements': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: false,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/parameter-properties': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/prefer-as-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-enum-initializers': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-for-of': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-function-type': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-includes': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-literal-enum-member': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-namespace-keyword': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-nullish-coalescing': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-optional-chain': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-readonly': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-readonly-parameter-types': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/prefer-reduce-type-parameter': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
    },
    '@typescript-eslint/prefer-regexp-exec': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-return-this-type': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-string-starts-ends-with': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-ts-expect-error': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/promise-function-async': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/quotes': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-array-sort-compare': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/restrict-plus-operands': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/restrict-template-expressions': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/return-await': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      type: 'problem',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/semi': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/sort-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/sort-type-union-intersection-members': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      replacedBy: [Array],
      schema: [Array],
    },
    '@typescript-eslint/space-before-blocks': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-before-function-paren': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-infix-ops': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/strict-boolean-expressions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/switch-exhaustiveness-check': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/triple-slash-reference': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/type-annotation-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/typedef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/unbound-method': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/unified-signatures': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Array],
    },
  },
};
const h = {
  meta: {
    docs: {
      description: 'Disallow missing React when using JSX',
      category: 'Possible Errors',
      recommended: true,
      url: 'https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md',
    },
    messages: { notInScope: "'{{name}}' must be in scope when using JSX" },
    schema: [],
  },
};
const i = {
  ruleId: 'react-native/no-inline-styles',
  rulesMeta: {
    'accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-bracket-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'array-callback-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'array-element-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'arrow-body-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'arrow-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'arrow-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'block-scoped-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'block-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'brace-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'callback-return': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    camelcase: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'capitalized-comments': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'class-methods-use-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'comma-dangle': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'comma-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'comma-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    complexity: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'computed-property-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'consistent-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'consistent-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'constructor-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    curly: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'default-case': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'default-case-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'dot-location': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'eol-last': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    eqeqeq: {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    'for-direction': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'func-call-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'func-name-matching': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'func-style': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'function-call-argument-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'function-paren-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'generator-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'getter-return': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'global-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'grouped-accessor-pairs': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'guard-for-in': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'handle-callback-err': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-blacklist': {
      deprecated: true,
      replacedBy: [Array],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-denylist': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'id-length': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'id-match': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'implicit-arrow-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    indent: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'indent-legacy': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'init-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'jsx-quotes': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'key-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'keyword-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'line-comment-position': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'linebreak-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'lines-around-directive': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'lines-between-class-members': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'logical-assignment-operators': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
    },
    'max-classes-per-file': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-depth': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-len': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-lines-per-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-nested-callbacks': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'max-statements-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'multiline-comment-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'multiline-ternary': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
      fixable: 'whitespace',
    },
    'new-cap': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'new-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'newline-after-var': {
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-before-return': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
    },
    'newline-per-chained-call': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-alert': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-async-promise-executor': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-await-in-loop': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-bitwise': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-buffer-constructor': {
      deprecated: true,
      replacedBy: [],
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-caller': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-case-declarations': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-catch-shadow': {
      type: 'suggestion',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-class-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-compare-neg-zero': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-cond-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-confusing-arrow': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-console': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      hasSuggestions: true,
      messages: [Object],
    },
    'no-const-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-binary-expression': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-constant-condition': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-constructor-return': {
      type: 'problem',
      docs: [Object],
      schema: {},
      fixable: null,
      messages: [Object],
    },
    'no-continue': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-control-regex': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-debugger': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'no-delete-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-div-regex': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-dupe-args': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-else-if': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-dupe-keys': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-case': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-duplicate-imports': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-else-return': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-empty': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-character-class': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-pattern': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-empty-static-block': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eq-null': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-ex-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-extend-native': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-extra-bind': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-boolean-cast': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-label': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-extra-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'no-extra-semi': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-fallthrough': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-floating-decimal': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-func-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-global-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-coercion': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-implicit-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-implied-eval': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-import-assign': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-inline-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-inner-declarations': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-regexp': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-irregular-whitespace': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-iterator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-label-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-lone-blocks': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-lonely-if': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-misleading-character-class': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-mixed-operators': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-requires': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-mixed-spaces-and-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-multi-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-multi-str': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-multiple-empty-lines': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-native-reassign': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [Array],
      messages: [Object],
    },
    'no-negated-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-negated-in-lhs': {
      type: 'problem',
      docs: [Object],
      replacedBy: [Array],
      deprecated: true,
      schema: [],
      messages: [Object],
    },
    'no-nested-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-func': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-native-nonconstructor': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-object': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      messages: [Object],
    },
    'no-new-require': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-symbol': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-new-wrappers': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-nonoctal-decimal-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-obj-calls': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-object-constructor': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-octal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-octal-escape': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-param-reassign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-path-concat': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-plusplus': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-process-env': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-process-exit': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-promise-executor-return': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'no-proto': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-prototype-builtins': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-regex-spaces': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-restricted-exports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-restricted-globals': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    'no-restricted-modules': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-properties': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-restricted-syntax': {
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      messages: [Object],
    },
    'no-return-assign': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-return-await': {
      hasSuggestions: true,
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      deprecated: true,
      replacedBy: [],
      schema: [],
      messages: [Object],
    },
    'no-script-url': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-self-assign': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-self-compare': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sequences': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-setter-return': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-shadow-restricted-names': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-spaced-func': {
      type: 'layout',
      docs: [Object],
      deprecated: true,
      replacedBy: [Array],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-sparse-arrays': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-sync': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-tabs': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-template-curly-in-string': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-this-before-super': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-throw-literal': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-trailing-spaces': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'no-undef': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-undef-init': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-undefined': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-underscore-dangle': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unexpected-multiline': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unmodified-loop-condition': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unneeded-ternary': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-unreachable': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unreachable-loop': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unsafe-finally': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unsafe-negation': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unsafe-optional-chaining': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      fixable: null,
      messages: [Object],
    },
    'no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-unused-labels': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-unused-private-class-members': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-use-before-define': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-useless-backreference': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-call': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-catch': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-computed-key': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'no-useless-concat': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-constructor': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'no-useless-escape': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'no-useless-rename': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'no-useless-return': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    'no-var': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'no-void': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'no-warning-comments': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'no-whitespace-before-property': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [],
      messages: [Object],
    },
    'no-with': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'nonblock-statement-body-position': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'object-property-newline': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'object-shorthand': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'one-var': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'one-var-declaration-per-line': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'operator-assignment': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'operator-linebreak': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'padded-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'padding-line-between-statements': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    'prefer-arrow-callback': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-destructuring': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'prefer-exponentiation-operator': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-named-capture-group': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    'prefer-numeric-literals': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-has-own': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
      fixable: 'code',
    },
    'prefer-object-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'prefer-promise-reject-errors': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'prefer-reflect': {
      type: 'suggestion',
      docs: [Object],
      deprecated: true,
      replacedBy: [],
      schema: [Array],
      messages: [Object],
    },
    'prefer-regex-literals': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'prefer-rest-params': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'prefer-spread': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: null,
      messages: [Object],
    },
    'prefer-template': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'quote-props': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      messages: [Object],
    },
    quotes: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    radix: {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'require-atomic-updates': {
      type: 'problem',
      docs: [Object],
      fixable: null,
      schema: [Array],
      messages: [Object],
    },
    'require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'require-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      deprecated: true,
      replacedBy: [],
      messages: [Object],
    },
    'require-unicode-regexp': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    'require-yield': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'rest-spread-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    semi: {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      schema: [Object],
      messages: [Object],
    },
    'semi-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'semi-style': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'sort-imports': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'sort-keys': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'sort-vars': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'space-before-blocks': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-before-function-paren': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-in-parens': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-infix-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'space-unary-ops': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'spaced-comment': {
      deprecated: true,
      replacedBy: [],
      type: 'suggestion',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    strict: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'switch-colon-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'whitespace',
      messages: [Object],
    },
    'symbol-description': {
      type: 'suggestion',
      docs: [Object],
      fixable: null,
      schema: [],
      messages: [Object],
    },
    'template-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'template-tag-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'unicode-bom': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'use-isnan': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'valid-jsdoc': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
      deprecated: true,
      replacedBy: [],
    },
    'valid-typeof': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      schema: [Array],
      messages: [Object],
    },
    'vars-on-top': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'wrap-iife': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'wrap-regex': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      schema: [],
      fixable: 'code',
      messages: [Object],
    },
    'yield-star-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    yoda: {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    'prettier/prettier': {
      docs: [Object],
      type: 'layout',
      fixable: 'code',
      schema: [Array],
      messages: [Object],
    },
    'eslint-comments/disable-enable-pair': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/no-aggregating-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-duplicate-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-restricted-disable': {
      docs: [Object],
      fixable: null,
      schema: [Object],
      type: 'suggestion',
    },
    'eslint-comments/no-unlimited-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'suggestion',
    },
    'eslint-comments/no-unused-disable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-unused-enable': {
      docs: [Object],
      fixable: null,
      schema: [],
      type: 'problem',
    },
    'eslint-comments/no-use': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'eslint-comments/require-description': {
      docs: [Object],
      fixable: null,
      schema: [Array],
      type: 'suggestion',
    },
    'react/boolean-prop-naming': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/button-has-type': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/default-props-match-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/destructuring-assignment': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/display-name': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-component-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-dom-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-elements': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-foreign-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/forbid-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/function-component-definition': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/hook-use-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/iframe-missing-sandbox': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/jsx-boolean-value': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-child-element-spacing': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [],
    },
    'react/jsx-closing-bracket-location': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-closing-tag-location': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
    },
    'react/jsx-curly-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    'react/jsx-curly-newline': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    'react/jsx-equals-spacing': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-filename-extension': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-first-prop-new-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-handler-names': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-indent-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-key': { docs: [Object], messages: [Object], schema: [Array] },
    'react/jsx-max-depth': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-max-props-per-line': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-newline': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-bind': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-comment-textnodes': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/jsx-no-constructed-context-values': {
      docs: [Object],
      messages: [Object],
      schema: {},
    },
    'react/jsx-no-duplicate-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-leaked-render': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    'react/jsx-no-literals': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-script-url': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-target-blank': {
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-useless-fragment': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-one-expression-per-line': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-no-undef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-curly-brace-presence': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-pascal-case': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-fragments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-props-no-multi-spaces': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/jsx-props-no-spreading': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-default-props': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-sort-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-space-before-closing': {
      deprecated: true,
      replacedBy: [Array],
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-tag-spacing': {
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    'react/jsx-uses-react': { docs: [Object], schema: [] },
    'react/jsx-uses-vars': { docs: [Object], schema: [] },
    'react/jsx-wrap-multilines': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-invalid-html-attribute': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'react/no-access-state-in-setstate': { docs: [Object], messages: [Object] },
    'react/no-adjacent-inline-elements': {
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    'react/no-array-index-key': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-arrow-function-lifecycle': {
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    'react/no-children-prop': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-danger': { docs: [Object], messages: [Object], schema: [] },
    'react/no-danger-with-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-deprecated': { docs: [Object], messages: [Object], schema: [] },
    'react/no-did-mount-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-did-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-direct-mutation-state': { docs: [Object], messages: [Object] },
    'react/no-find-dom-node': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-is-mounted': { docs: [Object], messages: [Object], schema: [] },
    'react/no-multi-comp': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-namespace': { docs: [Object], messages: [Object], schema: [] },
    'react/no-set-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-string-refs': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-redundant-should-component-update': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-render-return-value': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-this-in-sfc': { docs: [Object], messages: [Object], schema: [] },
    'react/no-typos': { docs: [Object], messages: [Object], schema: [] },
    'react/no-unescaped-entities': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unknown-property': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/no-unsafe': { docs: [Object], messages: [Object], schema: [Array] },
    'react/no-unstable-nested-components': { docs: [Object], schema: [Array] },
    'react/no-unused-class-component-methods': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/no-unused-prop-types': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/no-unused-state': { docs: [Object], messages: [Object], schema: [] },
    'react/no-object-type-as-default-prop': {
      docs: [Object],
      messages: [Object],
    },
    'react/no-will-update-set-state': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-es6-class': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prefer-exact-props': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/prefer-read-only-props': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    'react/prefer-stateless-function': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/prop-types': { docs: [Object], messages: [Object], schema: [Array] },
    'react/react-in-jsx-scope': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/require-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-optimization': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/require-render-return': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react/self-closing-comp': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/sort-comp': { docs: [Object], messages: [Object], schema: [Array] },
    'react/sort-default-props': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/sort-prop-types': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'react/state-in-constructor': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/static-property-placement': {
      docs: [Object],
      fixable: null,
      messages: [Object],
      schema: [Array],
    },
    'react/style-prop-object': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    'react/void-dom-elements-no-children': {
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'react-hooks/rules-of-hooks': { type: 'problem', docs: [Object] },
    'react-hooks/exhaustive-deps': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      schema: [Array],
    },
    'react-native/no-unused-styles': { schema: [] },
    'react-native/no-inline-styles': { schema: [] },
    'react-native/no-color-literals': { schema: [] },
    'react-native/sort-styles': { fixable: 'code', schema: [Array] },
    'react-native/split-platform-components': {
      fixable: 'code',
      schema: [Array],
    },
    'react-native/no-raw-text': { schema: [Array] },
    'react-native/no-single-element-style-arrays': {
      docs: [Object],
      fixable: 'code',
    },
    '@react-native/platform-colors': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/consistent-test-it': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/expect-expect': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/max-expects': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/max-nested-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-alias-methods': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/no-commented-out-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-conditional-expect': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-conditional-in-test': {
      docs: [Object],
      messages: [Object],
      type: 'problem',
      schema: [],
    },
    'jest/no-deprecated-functions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      fixable: 'code',
    },
    'jest/no-disabled-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-done-callback': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-duplicate-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-export': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/no-focused-tests': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      hasSuggestions: true,
    },
    'jest/no-hooks': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    'jest/no-identical-title': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-if': {
      docs: [Object],
      messages: [Object],
      deprecated: true,
      replacedBy: [Array],
      schema: [],
      type: 'suggestion',
    },
    'jest/no-interpolation-in-snapshots': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    'jest/no-jasmine-globals': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-jest-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-large-snapshots': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-mocks-import': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/no-restricted-matchers': {
      docs: [Object],
      type: 'suggestion',
      schema: [Array],
      messages: [Object],
    },
    'jest/no-standalone-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/no-test-prefixes': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/no-test-return-statement': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-called-with': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-comparison-matcher': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-each': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-equality-matcher': {
      docs: [Object],
      messages: [Object],
      hasSuggestions: true,
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-expect-assertions': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      hasSuggestions: true,
      schema: [Array],
    },
    'jest/prefer-expect-resolves': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-in-order': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-hooks-on-top': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-lowercase-title': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'jest/prefer-mock-promise-shorthand': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
      fixable: 'code',
    },
    'jest/prefer-snapshot-hint': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/prefer-spy-on': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'suggestion',
    },
    'jest/prefer-strict-equal': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
      hasSuggestions: true,
    },
    'jest/prefer-to-be': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-contain': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-to-have-length': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      type: 'suggestion',
      schema: [],
    },
    'jest/prefer-todo': {
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
      type: 'layout',
    },
    'jest/require-hook': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/require-to-throw-message': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/require-top-level-describe': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/unbound-method': {
      messages: [Object],
      schema: [Array],
      type: 'problem',
      docs: [Object],
    },
    'jest/valid-describe-callback': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    'jest/valid-expect-in-promise': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [],
    },
    'jest/valid-expect': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
    },
    'jest/valid-title': {
      docs: [Object],
      messages: [Object],
      type: 'suggestion',
      schema: [Array],
      fixable: 'code',
    },
    'ft-flow/array-style-complex-type': { fixable: 'code' },
    'ft-flow/array-style-simple-type': { fixable: 'code' },
    'ft-flow/arrow-parens': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      type: 'layout',
    },
    'ft-flow/boolean-style': { fixable: 'code' },
    'ft-flow/define-flow-type': undefined,
    'ft-flow/delimiter-dangle': { fixable: 'code' },
    'ft-flow/enforce-line-break': { fixable: 'code' },
    'ft-flow/enforce-suppression-code': undefined,
    'ft-flow/generic-spacing': { fixable: 'whitespace' },
    'ft-flow/interface-id-match': undefined,
    'ft-flow/newline-after-flow-annotation': { fixable: 'code' },
    'ft-flow/no-dupe-keys': undefined,
    'ft-flow/no-duplicate-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/no-existential-type': undefined,
    'ft-flow/no-flow-fix-me-comments': undefined,
    'ft-flow/no-flow-suppressions-in-strict-files': undefined,
    'ft-flow/no-internal-flow-type': undefined,
    'ft-flow/no-mixed': undefined,
    'ft-flow/no-mutable-array': { fixable: 'code' },
    'ft-flow/no-primitive-constructor-types': undefined,
    'ft-flow/no-types-missing-file-annotation': undefined,
    'ft-flow/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    'ft-flow/no-weak-types': undefined,
    'ft-flow/object-type-curly-spacing': { fixable: 'code' },
    'ft-flow/object-type-delimiter': { fixable: 'code' },
    'ft-flow/quotes': { fixable: 'code' },
    'ft-flow/require-compound-type-alias': undefined,
    'ft-flow/require-exact-type': { fixable: 'code' },
    'ft-flow/require-indexer-name': { fixable: 'code' },
    'ft-flow/require-inexact-type': undefined,
    'ft-flow/require-parameter-type': undefined,
    'ft-flow/require-readonly-react-props': undefined,
    'ft-flow/require-return-type': undefined,
    'ft-flow/require-types-at-top': undefined,
    'ft-flow/require-valid-file-annotation': { fixable: 'code' },
    'ft-flow/require-variable-type': undefined,
    'ft-flow/semi': { fixable: 'code' },
    'ft-flow/sort-keys': { fixable: 'code' },
    'ft-flow/sort-type-union-intersection-members': {
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    'ft-flow/space-after-type-colon': { fixable: 'code' },
    'ft-flow/space-before-generic-bracket': { fixable: 'code' },
    'ft-flow/space-before-type-colon': { fixable: 'code' },
    'ft-flow/spread-exact-type': undefined,
    'ft-flow/type-id-match': undefined,
    'ft-flow/type-import-style': { fixable: 'code' },
    'ft-flow/union-intersection-spacing': { fixable: 'code' },
    'ft-flow/use-flow-type': undefined,
    'ft-flow/use-read-only-spread': { messages: [Object] },
    'ft-flow/valid-syntax': { deprecated: true },
    '@typescript-eslint/adjacent-overload-signatures': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/array-type': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/await-thenable': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/ban-ts-comment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/ban-tslint-comment': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/ban-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/block-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/brace-style': {
      type: 'layout',
      docs: [Object],
      messages: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/class-literal-property-style': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/comma-dangle': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/comma-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/consistent-generic-constructors': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-indexed-object-style': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-assertions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/consistent-type-definitions': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-exports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/consistent-type-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
      fixable: 'code',
    },
    '@typescript-eslint/default-param-last': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/dot-notation': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/explicit-function-return-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/explicit-member-accessibility': {
      hasSuggestions: true,
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/explicit-module-boundary-types': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/func-call-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/indent': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/init-declarations': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/key-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/keyword-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/lines-around-comment': {
      type: 'layout',
      docs: [Object],
      schema: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      messages: [Object],
    },
    '@typescript-eslint/lines-between-class-members': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/member-delimiter-style': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/member-ordering': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/method-signature-style': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/naming-convention': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/no-array-constructor': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-base-to-string': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-confusing-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-confusing-void-expression': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
      fixable: 'code',
      hasSuggestions: true,
    },
    '@typescript-eslint/no-dupe-class-members': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-enum-values': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: false,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-duplicate-imports': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-duplicate-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-dynamic-delete': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-empty-function': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-empty-interface': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-explicit-any': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-extra-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-parens': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/no-extra-semi': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-extraneous-class': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-floating-promises': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-for-in-array': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-implicit-any-catch': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-implied-eval': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-import-type-side-effects': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-inferrable-types': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-this': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      hasSuggestions: undefined,
      schema: [Array],
    },
    '@typescript-eslint/no-invalid-void-type': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-loop-func': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-loss-of-precision': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-magic-numbers': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-meaningless-void-operator': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-misused-new': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-misused-promises': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/no-mixed-enums': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'problem',
    },
    '@typescript-eslint/no-namespace': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
      hasSuggestions: true,
    },
    '@typescript-eslint/no-non-null-asserted-optional-chain': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-non-null-assertion': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-parameter-properties': {
      deprecated: true,
      replacedBy: [Array],
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-redeclare': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-redundant-type-constituents': {
      docs: [Object],
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-require-imports': {
      type: 'problem',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-restricted-imports': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      fixable: undefined,
      schema: [Object],
    },
    '@typescript-eslint/no-shadow': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-this-alias': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-throw-literal': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-type-alias': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-condition': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      fixable: 'code',
      messages: [Object],
    },
    '@typescript-eslint/no-unnecessary-qualifier': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-arguments': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-assertion': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unnecessary-type-constraint': {
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-unsafe-argument': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-assignment': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-call': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-declaration-merging': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-enum-comparison': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-member-access': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unsafe-return': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/no-unused-expressions': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-unused-vars': {
      type: 'problem',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/no-use-before-define': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/no-useless-constructor': {
      type: 'problem',
      docs: [Object],
      hasSuggestions: undefined,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/no-useless-empty-export': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: false,
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/no-var-requires': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/non-nullable-type-assertion-style': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/object-curly-spacing': {
      deprecated: true,
      replacedBy: [],
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/padding-line-between-statements': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: false,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/parameter-properties': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Object],
    },
    '@typescript-eslint/prefer-as-const': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-enum-initializers': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-for-of': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-function-type': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-includes': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-literal-enum-member': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-namespace-keyword': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-nullish-coalescing': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/prefer-optional-chain': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-readonly': {
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/prefer-readonly-parameter-types': {
      type: 'suggestion',
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/prefer-reduce-type-parameter': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      fixable: 'code',
      schema: [],
    },
    '@typescript-eslint/prefer-regexp-exec': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/prefer-return-this-type': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-string-starts-ends-with': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [],
      fixable: 'code',
    },
    '@typescript-eslint/prefer-ts-expect-error': {
      type: 'problem',
      docs: [Object],
      fixable: 'code',
      messages: [Object],
      schema: [],
    },
    '@typescript-eslint/promise-function-async': {
      type: 'suggestion',
      fixable: 'code',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/quotes': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-array-sort-compare': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/require-await': {
      type: 'suggestion',
      docs: [Object],
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/restrict-plus-operands': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/restrict-template-expressions': {
      type: 'problem',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/return-await': {
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      type: 'problem',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/semi': {
      type: 'layout',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: undefined,
      schema: [Object],
      messages: [Object],
    },
    '@typescript-eslint/sort-type-constituents': {
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/sort-type-union-intersection-members': {
      deprecated: true,
      type: 'suggestion',
      docs: [Object],
      fixable: 'code',
      hasSuggestions: true,
      messages: [Object],
      replacedBy: [Array],
      schema: [Array],
    },
    '@typescript-eslint/space-before-blocks': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-before-function-paren': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/space-infix-ops': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      hasSuggestions: undefined,
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/strict-boolean-expressions': {
      type: 'suggestion',
      fixable: 'code',
      hasSuggestions: true,
      docs: [Object],
      schema: [Array],
      messages: [Object],
    },
    '@typescript-eslint/switch-exhaustiveness-check': {
      type: 'suggestion',
      docs: [Object],
      hasSuggestions: true,
      schema: [],
      messages: [Object],
    },
    '@typescript-eslint/triple-slash-reference': {
      type: 'suggestion',
      docs: [Object],
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/type-annotation-spacing': {
      type: 'layout',
      docs: [Object],
      fixable: 'whitespace',
      messages: [Object],
      schema: [Array],
    },
    '@typescript-eslint/typedef': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'suggestion',
    },
    '@typescript-eslint/unbound-method': {
      docs: [Object],
      messages: [Object],
      schema: [Array],
      type: 'problem',
    },
    '@typescript-eslint/unified-signatures': {
      docs: [Object],
      type: 'suggestion',
      messages: [Object],
      schema: [Array],
    },
  },
};
const j = { meta: { schema: [] } };
